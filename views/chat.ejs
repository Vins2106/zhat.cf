<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include("./parts/head.ejs") %>
  </head>
  <% if (!req.session.user.Wallpaper) { %>
  <body>
  <% } else { %>
  <body style="background-image: url('<%= req.session.user.Wallpaper %>'); background-size: cover; background-repeat: no-repeat; object-fit: cover; background-position: center; background-attachment: fixed;>
  <% } %>

            <div class="modal">
        <div id="user-modal" class="account-profile">
          <i style="cursor: pointer;" class="modal-close fa fa-close" onclick="toggleModal()"></i>
          <div id="avatar-name-modal">
            <img src="<%= he.Avatar %>" alt="<%= he.Username %>" class="avatar-modal">
            <span class="name-modal"><%= he.Username %></span>
          </div>
          <div id="id-modal" onclick="navigator.clipboard.writeText('<%= he.UID %>');">
            <label for="id-input-modal">Click to copy</label>
            <input type="text" value="<%= he.UID %>" disabled>
          </div>
        </div>          
        </div>
    
    <div class="chats">
      <div class="back-btn">
      <button class="btn btn-primary" onclick="location.href = '/'" style="margin: 10px;">
        Back
      </button>
        <span onclick="toggleModal()" class="target-name" style="cursor: pointer; margin: 18px; font-weight: bold; letter-spacing: 1px;"><%= he.Username %></span>
<!--       <button class="btn btn-primary" style="margin: 10px;">
        <i class="fa fa-video-camera"></i>
        </button> -->
      </div>
      
    <div class="chat-box" id="chat-list">
      <div class="he">
        <img class="he-avatar" src="https://img.freepik.com/free-vector/locker_53876-25496.jpg?size=626&ext=jpg">
        <div class="he-name-msg">
          <% let date = new Date(); %>
          <% let timenow = date.getTime() %>
        <span class="he-name">System</span>
        <span class="he-msg">Start chatting!</span>          
        </div>
      </div>      
    </div>
      <form action="" class="send-msg" id="form">
        <button type="button" class="btn btn-primary" style="min-width: auto; width: 50px !important;" onclick="emojiToggle()">
          ðŸ™‚
        </button>
        <emoji-picker></emoji-picker>
      <input autocomplete="off" id="input-msg" class="msg-input" type="text" maxlength="100" placeholder="max 100 characters" required><button type="submit" class="btn btn-primary" autofocus>send</button>
      </form>
    </div>
    
    <script src="https://cdn.socket.io/4.1.2/socket.io.min.js" integrity="sha384-toS6mmwu70G0fw54EGlWWeA4z3dyJ+dlXBtSURSKN4vyRFOcxd3Bzjj/AoOwY+Rg" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js" integrity="sha512-qTXRIMyZIFb8iQcfjXWCO8+M5Tbc38Qi5WzdPOYZHIlZpzBHG3L3by84BBBOiRGiEb7KKtAOAs5qYdUiZiQNNQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script type="module" src="https://cdn.jsdelivr.net/npm/emoji-picker-element@^1/index.js"></script>
    <audio src="https://www.myinstants.com/media/sounds/discord-notification.mp3"></audio>
                                                                                             
    <script>
    let modal = document.getElementById("user-modal");
    const audio = document.querySelector("audio");
    audio.volume = 0.3;                                                    
      
      let display = false;
      modal.style.display = "none";
      
      function toggleModal() {
        if (display) {
          display = false;
          modal.style.display = "none";
        } else {
          display = true;
          modal.style.display = "block";          
        }
      }
    </script>
    
    <script>
      
    var socket = io();
      
      let locationHref = window.location.href.split("chat/")[1]
      var form = document.getElementById("form");
      var input = document.getElementById("input-msg");
      let chats = document.getElementById(`chat-list`);
      let emoji = document.querySelector('emoji-picker');
      emoji.style.display = "none";
      let emojiDisplay = false;
      
      <% if (messages.List[0]) { %>
      <% messages.List.map(msg => { %>
      if ('<%= msg.author.UID %>' == '<%= req.session.user.UID %>') {   
      createMessage(<%- JSON.stringify(msg.author) %>, '<%= msg.content %>', '<%= msg.time %>', "me")
      } else if ('<%= msg.to %>' == '<%= req.session.user.UID %>') {   
        if ('<%= msg.to %>' == locationHref || '<%= msg.author.UID %>' !== locationHref) {
                 
        } else {
      createMessage(<%- JSON.stringify(msg.author) %>, '<%= msg.content %>', '<%= msg.time %>', "he")
      }
      }
      <% }) %>
      <% } %>
      
      setTimeout(() => {
        scrollTo(0, chats.scrollHeight)
      }, <%= messages.List.length * 10 %>)
      
      
      function emojiToggle() {
        if (emojiDisplay) {
          emoji.style.display = "none"
          emojiDisplay = false;
        } else {
          emoji.style.display = "block"
          emojiDisplay = true;
        }
      }
      
      emoji.addEventListener('emoji-click', event => {
        emojiToggle()
        input.value += event.detail.unicode;
      }); 
      
      form.addEventListener('submit', function(e) {
        let postDataMSG = {author: <%- JSON.stringify(req.session.user) %>, content: input.value, to: '<%= he.UID %>'};
        socket.emit('message', postDataMSG);
        socket.emit('newMessages', {id: '<%= req.session.user.UID %>', username: '<%= req.session.user.Username %>', to: '<%= he.UID %>', msg: input.value})
        e.preventDefault();
        form.reset()
        input.setAttribute("disabled", "disabled");
        input.setAttribute("placeholder", "cooldown");
        setTimeout(() => {
        input.disabled = false;
        input.setAttribute("placeholder", "max 100 characters");
        input.focus();
        }, 3000)
      });
      
function scrollToBottom() {
  scrollTo(0, chats.scrollHeight)
}    
      
      socket.on("message2", message => {

        if (message.author.UID == '<%= req.session.user.UID %>') {
          postMsg(message);
          createMessage(message.author, message.content, false, "me")
          scrollTo(0, chats.scrollHeight)
        }
        
        if (message.to == '<%= req.session.user.UID %>' && message.author.UID == locationHref) {
          audio.play()
          createMessage(message.author, message.content, false, "he")
          scrollTo(0, chats.scrollHeight)
        }
                
        
        
      })
      
      async function postMsg(message) {
        
        let POSTDATA = {author: message.author, content: message.content, time: moment().format('h:mm a'), to: message.to, type: "data"}
            
        fetch('https://zhat.cf/api/post/message', {
  method: 'PATCH',
  headers: {
    'Content-Type': 'application/json',
  },
          body: JSON.stringify(POSTDATA),
        }).then(res => res.json()).then(data => {
          if (data.error) {
            return console.log(`cant post message: ${e}`)
          } else {
            return console.log(`posted:`, POSTDATA)
          }
        })                
      }
      
      async function createMessage(user, content, time = false, mehe) {
        let base = document.createElement("div");
        base.setAttribute("class", mehe);
        chats.appendChild(base);
        
        let image = document.createElement("img");
        image.setAttribute("src", user.Avatar);
        image.setAttribute("class", `${mehe}-avatar`);
        base.appendChild(image);
        
        let namemsg = document.createElement("div");
        namemsg.setAttribute("class", "he-name-msg");
        base.appendChild(namemsg);
        
        let name = document.createElement("span");
        name.setAttribute("class", `${mehe}-name`)
                                 
        if (mehe == "me") {
          if (time) {
            name.textContent = `${user.Username}`
          } else {
            name.textContent = `${user.Username}`
          }
        } else {
          if (time) {
            name.textContent = `${user.Username}`
          } else {
            name.textContent = `${user.Username}`
          }
        }
        namemsg.appendChild(name)
        
        let message = document.createElement("span");
        message.setAttribute("class", `${mehe}-msg`);
        let msgContent = ""
        let msgContentProto = content.split(/ +/g);
        msgContentProto.map(x => {
          if (x.startsWith("https://") || x.startsWith("http://")) {
            msgContent += ` <a style="color: black;" href="${x}" target="_blank">${x}</a>`
          } else {
            msgContent += ` ${x}`;
          }
        });
        message.innerHTML = msgContent;
        namemsg.appendChild(message);
        
        return true;
      }
      
    </script>
    <script>
      
      console.log("connected")
      socket.emit("isConnected", '<%= req.session.user.UID %>')
                  
      socket.on("someoneOnline", userId => {
        let user = document.getElementById(userId);
        if (!user) return;
      
        
        user.classList.remove("offline")
        user.classList.add("online")
        user.innerHTML = '<i class="fa fa-check"></i> online'  
      })
      
      socket.on("newMessage", (opt) => {
        let user = document.getElementById(`${opt.id}-lastmsg`);
        if (opt.to !== '<%= req.session.user.UID %>') return;
        if (!user) return;
        
        user.innerHTML = `${opt.id == '<%= req.session.user.UID %>' ? '(you):' : '(new messages):'} ${opt.msg}`;
      })
                  
      socket.on("isOnline", userId => {
        socket.emit("updateOnline", '<%= req.session.user.UID %>')
        let user = document.getElementById(userId);
        if (!user) return;
        console.log(`${userId} is online`)
        
        user.classList.remove("remove")
        user.classList.add("online")
        user.innerHTML = '<i class="fa fa-check"></i> online';
      });
      
      socket.on("isOffline", userId => {
        let user = document.getElementById(userId);
        if (!user) return;
        console.log(`${userId} is offline`)
        
        user.classList.remove("online")
        user.classList.add("offline")
        user.innerHTML = '<i class="fa fa-times"></i> offline';        
      })
      
    </script>    
  </body>
</html> 